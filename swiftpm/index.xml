<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftPM on Learn Swift</title>
    <link>https://swift.jokerhub.cn/swiftpm/</link>
    <description>Recent content in SwiftPM on Learn Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 25 Jul 2020 20:05:58 +0800</lastBuildDate><atom:link href="https://swift.jokerhub.cn/swiftpm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>命令行下的SPM</title>
      <link>https://swift.jokerhub.cn/swiftpm/spm_in_cli/</link>
      <pubDate>Tue, 24 Nov 2020 02:22:36 +0800</pubDate>
      
      <guid>https://swift.jokerhub.cn/swiftpm/spm_in_cli/</guid>
      <description>查看命令行帮助信息 Swift工具链安装完成后，可以在控制台下使用下面命令查看Swift Package Manager的使用方法:
swift package --help 可以看到下面的帮助信息：
$ swift package --help OVERVIEW: Perform operations on Swift packages SEE ALSO: swift build, swift run, swift test USAGE: swift package &amp;lt;options&amp;gt; &amp;lt;subcommand&amp;gt; OPTIONS: --package-path &amp;lt;package-path&amp;gt; Specify the package path to operate on (default current directory). This changes the working directory before any other operation --cache-path &amp;lt;cache-path&amp;gt; Specify the shared cache directory path --config-path &amp;lt;config-path&amp;gt; Specify the shared configuration directory path --security-path &amp;lt;security-path&amp;gt; Specify the shared security directory path --scratch-path &amp;lt;scratch-path&amp;gt; Specify a custom scratch directory path (default .</description>
    </item>
    
    <item>
      <title>Xcode中的SPM</title>
      <link>https://swift.jokerhub.cn/swiftpm/spm_in_xcode/</link>
      <pubDate>Tue, 24 Nov 2020 03:22:36 +0800</pubDate>
      
      <guid>https://swift.jokerhub.cn/swiftpm/spm_in_xcode/</guid>
      <description>Xcode本身自带Swift工具链，从Swift 3.0开始，已经集成了Swift Package Manager功能，所以安装成功后就可以直接使用SPM相关功能
在Xcode中使用SPM功能，主要是通过图形界面进行操作的</description>
    </item>
    
    <item>
      <title>Swift Package Plugin</title>
      <link>https://swift.jokerhub.cn/swiftpm/swiftpm_plugin/</link>
      <pubDate>Sun, 16 Apr 2023 16:56:08 +0800</pubDate>
      
      <guid>https://swift.jokerhub.cn/swiftpm/swiftpm_plugin/</guid>
      <description>Xcode 11 引入了Swift Package, 它提供了一种将库作为源代码发布的好方法，Xcode 14将这种方法进行了扩展，让它可以使用插件来执行操作。例如构建过程中生成源码、自动完成发布任务。
什么是包插件(Package Plugin) 包插件是一种可以对软件包或者Xcode项目执行操作的Swift脚本，包插件使用Xcode专门提供的API，以软件包(Swift Package)的形式实现。一个软件包可以只包含一个插件，也可以包含多个插件。一个插件可以由多个Swift源文件构成。
一个软件包(Swift Package)中不仅可以包含库(.library)、产品(.product)、可执行文件(.executable)，也可以包含插件(package plugins)
软件包中定义的插件可以只限制在当前软件包中使用，也可以作为产品，提供给其它依赖方使用。与正常软件包被依赖的方式不同的时，插件的运行时内容不会带入App，但它可以访问项目所在构建机器上的相关工具或者目录。
Xcode 14中支持了两种插件类型：Command Plugin和Build Tool Plugin
命令插件可以执行类似代码格式化、更新git仓库贡献者列表或者一些预发布操作，有一些插件需要获取文件访问权限(例如代码格式化操作)，其它的插件可能不需要操作文件内容
构建工具插件可以作用于每一个需要它们的编译Target，可以在项目构建过程中生成源码或者处理相关资源
如果一个包插件在一个软件包中已经实现并允许被依赖，那么依赖包插件的方式和正常使用软件包的方式相关，只需要将插件所在的软件包添加到项目依赖中即可。
要执行包插件，可以在Xcode中的包名上右键选择弹出的包插件菜单项，也可以用命令行的方式运行包插件。如果包插件定义了用户可输入的参数，在执行时也可以接受用户输入参数。
包插件在Xcode中运行时，会弹窗提示用户需要针对哪些Target运行，如果插件运行涉及到获取文件访问权限，Xcode也会提示用户，并可以跳转到插件中实际申请文件访问权限的代码位置。
包插件是如何工作的? 包插件是根据需要进行编译运行的Swift脚本，每一个包插件都在一个单独的进程中运行。包插件可以获取到运行所在软件包的相关信息、机器的命令行工具、操作文件系统、调用基础库能力去完成工作。
包插件是在阻止访问网络的沙盒环境中运行的，默认可以直接读写指定的几个文件系统位置。命令插件需要访问其它文件系统位置，需要额外请求对应的权限。
包插件也可以将执行结果发给Xcode，让Xcode展示一些提示信息、警告或者错误。
包插件的实现依赖Xcode中PackagePlugin模块提供的API。下面是一个插件定义的简化示例：
import PackagePlugin @main struct MyPlugin: CommandPlugin { // 入口函数的定义，依赖于插件的具体类型 } 命令插件(Command Plugin) 命令插件扩展了开发工作流程，它直接作用于软件包，不在项目构建期间运行。并非所有的命令插件都需要文件系统权限，但如果命令插件确实需要申请文件系统权限，需要在包清单文件中指明相关权限申请项信息。有申请权限的命令插件，在运行之前，Xcode会提示用户是否授权命令插件需要的对应权限，只有用户允许对应的权限，插件才能运行。
插件通常很小，依赖其它工具完成任务，依赖项可以是源码，也可以二进制文件，在插件运行之前，Xcode会对相关依赖工具的源码进行编译。
一个命令插件的定义框架示例：
import PackagePlugin @main struct MyPlugin: CommandPlugin { // 入口函数的定义，依赖于插件的具体类型 func performCommand(context: PluginContext, arguments: [String]) throws { // 执行插件逻辑 } } 除了在Xcode中使用GUI的方式调用插件运行外，还可以使用命令行工具运行插件。Swift Package Manager 5.6时提供了和插件相关的子命令，swift package plugin --list可以用来查看所有插件。涉及到需要获取额外文件系统权限申请的命令插件时，使用命令行方式运行，也会有对应的权限提示，询问用户是否授与对应插件相应的权限。如果在命令行运行插件时想到默认直接允许权限申请时，可以使用--allow-writing-to-package-directory选项。命令行运行时，也可以给插件传入对应的参数。</description>
    </item>
    
  </channel>
</rss>
